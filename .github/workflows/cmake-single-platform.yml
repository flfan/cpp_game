# 矩阵版 CMake 跨平台构建 & 发布
name: CMake multi-platform

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  # 允许手动触发
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: cppGame-linux
            install_cmd: |
              sudo apt-get update
              sudo apt-get install -y \
                libx11-dev libxext-dev libxrandr-dev libxinerama-dev libxcursor-dev \
                libxi-dev libxfixes-dev libxss-dev libwayland-dev libdecor-0-dev \
                libegl1-mesa-dev libgl1-mesa-dev
            cmake_extra: -DSDL_X11=ON -DSDL_WAYLAND=ON

          - os: macos-latest
            artifact_name: cppGame-macos
            install_cmd: ""
            cmake_extra: ""

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: ${{ matrix.install_cmd }}

    - name: Checkout submodules
      run: git submodule update --init --recursive --depth 1

    - name: Configure CMake
      if: runner.os == 'linux'
      run: |
        cmake -B build \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              ${{ matrix.cmake_extra }}

    - name: Configure CMake (macOS)
      if: runner.os == 'macOS'
      run: |
        cmake -B build \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -DCMAKE_INSTALL_RPATH=@executable_path \
              -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON
              ${{ matrix.cmake_extra }}

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} --target cppGame -j

    - name: Package
      working-directory: build
      if: runner.os == 'linux'
      run: |
        mkdir -p package
        cp -r bin/ package/
        tar -czf ${{ matrix.artifact_name }}.tar.gz -C package .

    - name: Package (macOS)
      if: runner.os == 'macOS'
      working-directory: build
      run: |
        mkdir -p package
        # 拷可执行文件
        cp -r bin/ package/

        # 拷所有自己编译出的 *.dylib（SDL3、SDL3_image、SDL3_mixer、SDL3_ttf…）
        # 注意：下面两行假设它们和 cppGame 同目录或 build/lib 目录
        find . -name '*.dylib' -exec cp {} package/ \;
        # 去掉 quarantine 标记
        tar -czf ${{ matrix.artifact_name }}.tar.gz -C package .

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: build/${{ matrix.artifact_name }}.tar.gz

    # 仅当推送 tag 时发布 Release；可保留也可删掉 if
    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: build/${{ matrix.artifact_name }}.tar.gz
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}